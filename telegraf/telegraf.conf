[agent]
## Default data collection interval for all inputs
interval = "20s"
## Rounds collection interval to 'interval'
## ie, if interval="10s" then always collect on :00, :10, :20, etc.
round_interval = true
## Telegraf will send metrics to outputs in batches of at
## most metric_batch_size metrics.
metric_batch_size = 1000
## For failed writes, telegraf will cache metric_buffer_limit metrics for each
## output, and will flush this buffer on a successful write. Oldest metrics
## are dropped first when this buffer fills.
metric_buffer_limit = 10000
## Collection jitter is used to jitter the collection by a random amount.
## Each plugin will sleep for a random time within jitter before collecting.
## This can be used to avoid many plugins querying things like sysfs at the
## same time, which can have a measurable effect on the system.
collection_jitter = "0s"
## Default flushing interval for all outputs. You shouldn't set this below
## interval. Maximum flush_interval will be flush_interval + flush_jitter
flush_interval = "20s"
## Jitter the flush interval by a random amount. This is primarily to avoid
## large write spikes for users running a large number of telegraf instances.
## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
flush_jitter = "3s"
## By default, precision will be set to the same timestamp order as the
## collection interval, with the maximum being 1s.
## Precision will NOT be used for service inputs, such as logparser and statsd.
## Valid values are "ns", "us" (or "Âµs"), "ms", "s".
precision = ""
## Run telegraf in debug mode
debug = true
## Run telegraf in quiet mode
quiet = false
## Override default hostname, if empty use os.Hostname()
hostname = ""
## If set to true, do no set the "host" tag in the telegraf agent.
omit_hostname = false

###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################
[[outputs.prometheus_client]]
  ## Address to listen on.
  listen = ":9273"
  metric_version = 2


###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################

[[inputs.ping]]
  ## Hosts to send ping packets to.
  urls = ["google.com", "10.7.5.1", "10.7.5.6", "10.7.5.7", "10.7.5.11", "10.7.5.12", "10.7.5.13", "10.7.5.48", "10.7.5.49", "10.0.0.54", "10.0.0.136"]


[[inputs.snmp]]
  ## Agent addresses to retrieve values from.
  ##   format:  agents = ["<scheme://><hostname>:<port>"]
  ##   scheme:  optional, either udp, udp4, udp6, tcp, tcp4, tcp6.  
  ##            default is udp
  ##   port:    optional
  ##   example: agents = ["udp://127.0.0.1:161"]
  ##            agents = ["tcp://127.0.0.1:161"]
  ##            agents = ["udp4://v4only-snmp-agent"]
  agents = [ "udp://192.168.1.1:161", "udp://192.168.1.116:161"]
  version = 2
  community = "public"

  [[inputs.snmp.field]]
    oid = "RFC1213-MIB::sysUpTime.0"
    name = "uptime"

  [[inputs.snmp.field]]
    name = "hostname"
    oid = "RFC1213-MIB::sysName.0"
    is_tag = true

  [[inputs.snmp.table]]
    name = "snmp"
    inherit_tags = [ "hostname" ]
    oid = "IF-MIB::ifXTable"

    [[inputs.snmp.table.field]]
      name = "ifName"
      oid = "IF-MIB::ifName"
      is_tag = true

    [[inputs.snmp.table.field]]
      oid = "IF-MIB::ifDescr"
      name = "ifDescr"
      is_tag = true

#[[inputs.snmp]]
#  ## Agent addresses to retrieve values from.
#  ##   format:  agents = ["<scheme://><hostname>:<port>"]
#  ##   scheme:  optional, either udp, udp4, udp6, tcp, tcp4, tcp6.  
#  ##            default is udp
#  ##   port:    optional
#  ##   example: agents = ["udp://127.0.0.1:161"]
#  ##            agents = ["tcp://127.0.0.1:161"]
#  ##            agents = ["udp4://v4only-snmp-agent"]
#  agents = ["udp://192.168.1.1:161"]
#  version = 1
#  community = "public"
#  
#  [[inputs.snmp.field]]
#    oid = "RFC1213-MIB::sysUpTime.0"
#    name = "uptime"
#
#  [[inputs.snmp.field]]
#    oid = "RFC1213-MIB::sysName.0"
#    name = "source"
#    is_tag = true
#
#  [[inputs.snmp.table]]
#    oid = "IF-MIB::ifTable"
#    name = "interface"
#    inherit_tags = ["source"]
#
#  [[inputs.snmp.table.field]]
#    oid = "IF-MIB::ifDescr"
#    name = "ifDescr"
#    is_tag = true
#
#  [[inputs.snmp.field]]
#    name = "unifiApSystemModel"
#    oid = "UBNT-UniFi-MIB::unifiApSystemModel.0"
#
#  #  UAP firmware version
#  [[inputs.snmp.field]]
#    name = "unifiApSystemVersion"
#    oid = "UBNT-UniFi-MIB::unifiApSystemVersion.0"
#
#  ##
#  ## Interface Details & Metrics
#  ##
#  #  Wireless interfaces
#  [[inputs.snmp.table]]
#    oid = "UBNT-UniFi-MIB::unifiRadioTable"
#    [[inputs.snmp.table.field]]
#      is_tag = true
#      oid = "UBNT-UniFi-MIB::unifiRadioName"
#    [[inputs.snmp.table.field]]
#      is_tag = true
#      oid = "UBNT-UniFi-MIB::unifiRadioRadio"
#  #  BSS instances
#  [[inputs.snmp.table]]
#    oid = "UBNT-UniFi-MIB::unifiVapTable"
#    [[inputs.snmp.table.field]]
#      is_tag = true
#      oid = "UBNT-UniFi-MIB::unifiVapName"
#    [[inputs.snmp.table.field]]
#      is_tag = true
#      oid = "UBNT-UniFi-MIB::unifiVapRadio"
#    [[inputs.snmp.table.field]]
#      is_tag = true
#      oid = "UBNT-UniFi-MIB::unifiVapEssId"
#  #  Ethernet interfaces
#  [[inputs.snmp.table]]
#    oid = "UBNT-UniFi-MIB::unifiIfTable"
#    [[inputs.snmp.table.field]]
#      is_tag = true
#      oid = "UBNT-UniFi-MIB::unifiIfName"